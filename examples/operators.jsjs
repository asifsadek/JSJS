print(10, "a", 10 + 20);

// numbers
val x : num = 10;
val y : num = 100;
val z : num = 20;
val t : num = x + (y * z);
val u? : bool = t == 2010;
val negs : num = -t;

// strings
val firstName : string = "foo";
val secondName : string = "bar";
val bio : string = "my first name is: " ^ firstName ^ ", my second name is: " ^ secondName;

// booleans
val hungry? : bool = false;
val sleepy? : bool = !true; // false
val happy? : bool = !hungry? && !sleepy?;

// if else
val resp: string = if happy? then { "yes"; } else { "no"; };
val single: string =
  if resp == "yes" then { "Y";
  } else {
    if 10 == 10 then { "Y"; } else { "N"; };
  }
;

val sum: (num, num) -> num = /\(x, y) => x + y;

val myMap: list num = List.map((/\(x) => x * x), [1, 2, 3, 4]);

val total: num = sum(a, b);

val x: list T = ["a", "b", "c"];

// function decs
def add(a: num, b: num): num {
  a + b;
}

val people : <string: <string: num>> = {
  "foo" : {"a" : 10},
  "goo" : {"b" : 40},
  "hoo" : {"c" : 2}
};


val sq: (num, num) -> num = /\(x, y) => x * y;

val gcd = /\(a: num, b: num): num => {
  if a == b then a 
  else {
    if a > b 
    then gcd((a - b), b) 
    else gcd((b - a), a);
  };
};

val filter = /\(f: (num) -> bool, xs: list num): list num => {
  if List.empty(xs) then xs
  else {
    if f(List.hd(xs)) 
      then List.cons(List.hd(xs), filter(f, List.tl(xs))) 
      else filter(List.tl(xs));
  };
};
