val num_to_sign = /\(x: num): string => {
  if (x >= 0) then "non-negative" else "negative";
};

// annotated generic function decl
val two_args: [T, U](T, U) -> T = /\[T, U](x: T, y: U): T => {
  x;
};

val apply = /\[T, U](fn: (T) -> U, x: T): U => {
  fn(x);
};

val add = /\(a: num): num => a;

val to_uppercase = /\(x: string): string => "Upper";

val is_positive = apply(to_uppercase, "string");

val n = two_args(10, 20);
print_num(n);

val head = /\[T](xs: list T): T => {
  "10";
};

val tail = /\[T](xs: list list T): list list T => {
  "10";
};

val t = hd([1, 2, 3, 4]);

val get = /\[T, U](map: <T: U>, key: T): U => {
  "10";
};

val foomap: <string: num> = {
  "a": 10,
  "b": 20
};

val is_num: num = get(foomap, "a");
