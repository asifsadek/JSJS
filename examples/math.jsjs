val gcd = /\(a: num, b: num): num => {
  if a == b then a
  else {
    if a > b
    then gcd((a - b), b)
    else gcd((b - a), a);
  };
};

//print(gcd(12, 8));

val pow = /\(base: num, exp: num): num => {
  val aux = /\(accum: num, e: num): num => {
    if (e == 1) then accum
    else aux (accum * base, e - 1);
  };
  aux(base, exp);
};

val chess_squares = pow(8, 2);

//print("Total number of squares on a chessboard: ");
//print(chess_squares);

val countPrimes = /\(n: num): num => {
  val aux = /\(count: num, xs: list num): num => {
    if hd(xs) <= n // no sqrt yet :(
    then aux(count + 1,List.filter_not(/\(y: num): bool => y % hd(xs) == 0, xs))
    else count + List.length(xs);
  };
  aux(0, List.range(2, n));
};

print(countPrimes(100));
