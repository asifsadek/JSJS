//val merge = /\(a: list num, b: list num): list num => {
   //if hd(a) < hd(b)
   //then hd(a) :: merge(tl(a), b)
   //else hd(b) :: merge(a, tl(b));
//};

//val mergeSort = /\(a: list num): list num => {
   //val size = List.length(a);
   //if size < 2 then a
   //else merge(mergeSort(split(a, 0, size/2)),
              //mergeSort(split(a, size/2 + 1, size - 1)));
//};

val split = /\(a: list num, start: num, end: num): list num => {
  [10];
   //if start != 0
   //then split(tl(a), start - 1, a)
   //else {
      //if (end == -1) then a
      //else hd(a) :: split(tl(a), start, end - 1);
   //};
};

//List.print_list(mergeSort([5, 10, 1, 4, 2]));
//val x = split(2, 2, 3);
