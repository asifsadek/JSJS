val total: num = 10 + 20;


val diffcount = 20 + if true then 30 else 40;

// concat two strings
val msg2 = "hello, " ^ if false then {
  val s1 = 10;
  "world!";
} else {
  val s2 = 202 + 30;
  "earth!";
};

val xs : list num = [10, 20];

val strMap  = {
  "foo": 10,
  "bar": 20,
  "hoo": 40
};

val nestedMap: <string: <string: bool>> = {
  "foo" : {"a" : true},
  "goo" : {"b" : false},
  "hoo" : {"c" : true}
};

val msg: string = "hello" ^ ", world";

val newmsg = msg ^ "new new new";

val msg3 = if true then {
  val msg: bool = false;
  if true then {
    val msg = 20;
    msg < 40;
  } else {
    msg == false;
  };
} else {
  msg == "hello, world";
};

val identity = /\(a: num): num => a;
val ten : num = identity(10);

val add: (num, num) -> num = /\(a: num, b: num): num => a + b;
val thirty = add(10, 20);

// recursive function
val gcd = /\(a: num, b: num): num => {
  if a == b then a
  else {
    if a > b
    then gcd((a - b), b)
    else gcd((b - a), a);
  };
};

val s: num = gcd(10, 20);

// tail-recursive function
val pow = /\(base: num, exp: num): num => {
  val aux = /\(accum: num, e: num): num => {
    if (e == 1) then accum
    else aux (accum * base, e - 1);
  };
  aux(base, exp);
};

val chess_squares = pow(8, 2);

// function as return type
val addx = /\(x: num): (num) -> num => /\(y: num): num => x + y;

// function as return type with annotations
val subx: (num) -> (num) -> num =
  /\(x: num): (num) -> num => /\(y: num): num => x - y;

val adds10 : (num) -> num = addx(10);

val hundred = adds10(90);

// functions as arguments
val applier = /\(fn: (num) -> num, x: num): num => fn(x);

val fourhundred = applier(/\(x: num): num => x * x, 20);

// unit testing :D
val nothing : unit = ();

// vals are unit type
val assign_stmt : unit = val something : unit = ();

