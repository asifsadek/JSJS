val sort = /\(compare: (T, T) -> bool, xs: list T) : list T => {
    if xs == [] then []
    else {
        val l1 = List.filter(/\(x) => compare(x, hd(xs)), tl(xs));
        val l2 = List.filter(/\(x) => !compare(x, hd(xs)), tl(xs));
        List.concat(sort(compare, l1), hd(xs) :: (sort(compare, l2)));
    };
};

//val sort = /\(xs: list T) : list T => {
//    if xs  == [] then []
//    else {
//        val l1 = List.filter(/\(x) => x < hd(xs), tl(xs));
//        val l2 = List.filter(/\(x) => x >= hd(xs), tl(xs));
//        List.concat(sort(l1), hd(xs) :: (sort(l2)));
//    };
//};

val l1 = [5,3,2,6,3,1];
val l2 = [1,2,3,4,5,6];

// compare functions
val lt = /\(x, y) => x < y;
val gt = /\(x,y) => x > y;

List.iter(print_num, sort(lt, l1));
List.iter(print_num, sort(gt, l2));

