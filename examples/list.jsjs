// returns the length of a list
val length = /\[T](xs: list T): num => {
  val aux = /\[T](c: num, ys: list T): num => {
    if empty?(ys) then c
    else aux(c + 1, tl(ys));
  };
  aux(0, xs);
};

// returns the nth element of the list
val nth = /\[T](xs: list T, n: num): T => {
  if n == 0 then hd(xs)
  else nth(tl(xs), n-1);
};

// filters the list based on the predicate
val filter = /\[T](pred: (T) -> bool, xs: list T): list T => {
  if empty?(xs) then xs
  else {
    if pred(hd(xs))
    then hd(xs) :: filter(pred, tl(xs))
    else filter(pred, tl(xs));
  };
};

// prints the elements of a list
val print_list = /\[T](xs: list T): unit => {
  if empty?(xs) then (-) // the unit literal
  else {
    print(hd(xs));
    print_list(tl(xs));
  };
};

// returns a list of numbers from start to end. Like python
// start is inclusive, end is exclusive.
val range = /\(start: num, end: num): list num => {
  if start >= end then [0]
  else start :: range(start+1, end);
};

val even? = /\(x: num): bool => x % 2 == 0;

print(length(range(1, 4)));
print(length(filter(even?, range(1, 10))));

print("\nlist of numbers: ");
print_list(range(1, 4));

print("\nlist of strings: ");
print_list(["foo", "bar", "baz"]);
