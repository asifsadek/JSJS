// returns the length of a list
val length = /\[T](xs: list T): num => {
  val aux = /\[T](c: num, ys: list T): num => {
    if empty?(ys) then c
    else aux(c + 1, tl(ys));
  };
  aux(0, xs);
};

// returns the nth element of the list
val nth = /\[T](xs: list T, n: num): T => {
  if n == 0 then hd(xs)
  else nth(tl(xs), n-1);
};

// filters the list based on the predicate
val filter = /\[T](pred: (T) -> bool, xs: list T): list T => {
  if empty?(xs) then xs
  else {
    if pred(hd(xs))
      then hd(xs) :: filter(pred, tl(xs))
      else filter(pred, tl(xs));
  };
};

val range = /\(start: num, end: num): list num => {
  if start >= end then [0]
  else start :: (range(start+1, end));
};

val even? = /\(x: num): bool => x % 2 == 0;

val evens = filter(even?, range(1, 5));

print(length(range(1, 4)));
