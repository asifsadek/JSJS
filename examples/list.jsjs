val xs = 1000 :: 4000 :: [];
List.print_list(xs);

val p = List.print_list;

val even? = /\(x: num): bool => x % 2 == 0;

print("length of list range(1,4) ->");

print(List.length(List.range(1, 4)));

print("length of list with odd numb in range(1, 10) ->");
p(List.filter(even?, List.range(1, 10)));

p(List.filter(/\(x: num): bool => !even?(x), List.range(1,10)));

print("\nTesting map");
val squares = List.map(/\(x:num): num => x * x, List.range(1, 10));
List.print_list(squares);


// testing the reduce function :)
val sum = List.reduce(/\(acc: num, y : num): num => acc + y, 0, [1,2,3,4]);
print(sum);

// String module function in future:
// Testng reduce for string list with a join function
val join = /\(sep: string, xs: list string): string => {
  if empty?(xs) then ""
  else List.reduce(
      /\(acc: string, x: string) : string => acc ^ sep ^ x,
      hd(xs),
      tl(xs)
  );
};

val joined = join(" ", ["hello", "world", "Reduce"]);

print(joined);

print("");
p(List.insert([1,2,4,5], 3, 6));

print("");
p(List.remove([1,2,4,5], 3));

print("");
p(List.remove([1,2,4,5], 2));

print("");
p(List.remove([1,2,4,5], 0));
