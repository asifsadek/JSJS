val count = /\(m: <T: U>): num => {
  List.length(keys(m));
};

val values = /\(m: <T: U>): list U => {
  val aux = /\(ks: list T): list U => {
    if empty?(ks) then []
    else get(m, hd(ks)) :: aux(tl(ks));
  };
  aux(keys(m));
};

// Returns a map that consists of the rest of the maps conj-ed onto
// the first.  If a key occurs in more than one map, the mapping from
// the latter (left-to-right) will be the mapping in the result.
val merge = /\(m1: <T: U>, m2: <T: U>): <T: U> => {
  val aux = /\(m: <T: U>, mapkeys: list T): <T: U> => {
    if empty?(mapkeys) then m
    else {
      val key = hd(mapkeys);
      val value = get(m2, key);
      val newm = set(m, key, value);
      aux(newm, tl(mapkeys));
    };
  };
  aux(m1, keys(m2));
};
